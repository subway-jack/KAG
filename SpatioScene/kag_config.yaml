#------------project configuration start----------------#
openie_llm: &openie_llm
  type: maas
  base_url: https://api.siliconflow.cn/
  api_key: sk-aqpbjfuhcbiyklnpzipjqgfgzjfunvlhgnercsgbcueeilke
  model: deepseek-ai/DeepSeek-V2.5
  enable_check: false
  max_tokens: 4096

chat_llm: &chat_llm
  type: maas
  base_url: https://api.siliconflow.cn/
  api_key: sk-aqpbjfuhcbiyklnpzipjqgfgzjfunvlhgnercsgbcueeilke
  model: deepseek-ai/DeepSeek-V2.5
  enable_check: false
  max_tokens: 4096

vectorize_model: &vectorize_model
  api_key: sk-aqpbjfuhcbiyklnpzipjqgfgzjfunvlhgnercsgbcueeilke
  base_url: https://api.siliconflow.cn/v1/
  model: BAAI/bge-m3
  type: openai
  vector_dimensions: 1024
  enable_check: false
vectorizer: *vectorize_model

log:
  level: INFO

project:
  biz_scene: spatiotemporal
  host_addr: http://127.0.0.1:8887
  id: '2'
  language: en
  namespace: SpatioScene
#------------project configuration end----------------#

json_runner:
  # 1. 原始 JSON Scanner，逐条读取每个 MotionSample 对象
  scanner:
    type: json_scanner

  # 2. 构建器链，使用 SPG 映射把 JSON 转成实体
  chain:
    type: structured_builder_chain
    mapping:
      type: spg_mapping
      id_field: id

    # 3. 最终写入 KG
    writer:
      type: kg_writer

#------------kag-builder configuration end----------------#

#------------schema configuration start----------------#
schema:
  - ./schema/spatiotemporal.schema
#------------schema configuration end----------------#

#------------kag-solver configuration start----------------#
search_api:
  type: openspg_search_api

graph_api:
  type: openspg_graph_api

kg_cs:
  type: kg_cs_open_spg
  path_select:
    type: exact_one_hop_select
  entity_linking:
    type: entity_linking
    recognition_threshold: 0.9
    exclude_types:
      - Chunk

kg_fr:
  type: kg_fr_open_spg
  top_k: 20
  path_select:
    type: fuzzy_one_hop_select
    llm_client: *chat_llm
  ppr_chunk_retriever_tool:
    type: ppr_chunk_retriever
    llm_client: *openie_llm
  entity_linking:
    type: entity_linking
    recognition_threshold: 0.8
    exclude_types:
      - Chunk

rc:
  type: rc_open_spg
  vector_chunk_retriever:
    type: vector_chunk_retriever
    vectorize_model: *vectorize_model
  vectorize_model: *vectorize_model
  top_k: 20

kag_merger:
  type: kg_merger
  top_k: 20
  llm_module: *chat_llm
  summary_prompt:
    type: default_thought_then_answer
  vectorize_model: *vectorize_model

kag_hybrid_executor: &kag_hybrid_executor_conf
  type: kag_hybrid_executor
  lf_rewriter:
    type: kag_spo_lf
    llm_client: *chat_llm
    lf_trans_prompt:
      type: default_spo_retriever_decompose
    vectorize_model: *vectorize_model
  flow: |
    kg_cs->kg_fr->kag_merger;rc->kag_merger

kag_output_executor: &kag_output_executor_conf
  type: kag_output_executor

kag_deduce_executor: &kag_deduce_executor_conf
  type: kag_deduce_executor

py_code_based_math_executor: &py_code_based_math_executor_conf
  type: py_code_based_math_executor
  llm: *chat_llm

solver_pipeline:
  type: kag_static_pipeline
  planner:
    type: lf_kag_static_planner
    llm: *chat_llm
    plan_prompt:
      type: spatioScene_lf_static_planning
    rewrite_prompt:
      type: spatioScene_rewrite_sub_task_query
  executors:
    - *kag_hybrid_executor_conf
    - *py_code_based_math_executor_conf
    - *kag_deduce_executor_conf
    - *kag_output_executor_conf
  generator:
    type: llm_generator
    llm_client: *chat_llm
    generated_prompt:
      type: spatioScene_refer_generator_prompt
    enable_ref: true
#------------kag-solver configuration end----------------#
